# -*- coding: utf-8 -*-
"""
Created on Wed Oct 25 11:22:16 2023

@author: nachi
"""


import numpy as np
import matplotlib.pyplot as plt


def simulate_gyros_reading(w,ruido,ARW,bias,t):
    num_samples = len(w)
    readings = []
    for i in range(num_samples):
        #aplicar el ruido del sensor
        noise = np.random.normal(0, ruido, 1)
        
        #aplicar el ARW del sensor, multiplicandolo con el tiempo
        ARW_t = ARW*np.sqrt(t[i])
        
        #Simular la medicion del giroscopio
        measurement = w[i] + noise + ARW_t + bias
        
        readings.append(measurement)
        
    return readings

w = [0.13413314093114412,
0.13404993295430914,
0.13396033482107503,
0.13386438341063173,
0.13376211811416758,
0.13365358080437545,
0.13353881580314028,
0.13341786984745557,
0.13329079205361855,
0.13315763387975643,
0.13301844908673763,
0.13287329369752432,
0.13272222595502448,
0.13256530627850294,
0.1324025972186133,
0.13223416341111316,
0.13206007152932697,
0.13188039023542214,
0.13169519013056444,
0.13150454370402032,
0.1313085252812741,
0.13110721097122874,
0.13090067861255952,
0.1306890077192899,
0.13047227942565962,
0.13025057643035456,
0.13002398294016834,
0.12979258461316492,
0.12955646850141173,
0.1293157229933518,
0.12907043775588342,
0.12882070367621426,
0.12856661280355747,
0.1283082582907346,
0.128045734335751,
0.1277791361234065,
0.12750855976700443,
0.1272341022502199,
0.12695586136918668,
0.1266739356748616,
0.12638842441572254,
0.12609942748085548,
0.12580704534348378,
0.12551137900499137,
0.1252125299394899,
0.1249106000389774,
0.1246056915591351,
0.12429790706580614,
0.1239873493821987,
0.12367412153685363,
0.12335832671241487,
0.12304006819523888,
0.12271944932587729,
0.12239657345046479,
0.12207154387304252,
0.12174446380884492,
0.12141543633857607,
0.12108456436369956,
0.12075195056276382,
0.120417697348783,
0.12008190682769139,
0.11974468075788743,
0.11940612051088165,
0.11906632703306066,
0.11872540080857785,
0.11838344182337925,
0.11804054953037163,
0.11769682281573804,
0.11735235996640399,
0.11700725863865655,
0.11666161582791636,
0.11631552783966143,
0.11596909026149996,
0.11562239793638812,
0.11527554493698712,
0.11492862454115282,
0.1145817292085498,
0.1142349505583804,
0.11388837934821851,
0.11354210545393628,
0.11319621785071134,
0.1128508045951007,
0.1125059528081671,
0.11216174865964203,
0.11181827735310952,
0.11147562311219349,
0.11113386916773091,
0.11079309774591264,
0.11045339005737267,
0.11011482628720633,
0.10977748558589737,
0.10944144606113353,
0.10910678477048935,
0.10877357771495524,
0.10844189983329086,
0.10811182499718115,
0.10778342600717271,
0.10745677458936818,
0.10713194139285616,
0.10680899598785386,
0.10648800686454007,
0.10616904143255534,
0.10585216602114672,
0.10553744587993436,
0.10522494518027706,
0.10491472701721423,
0.10460685341196169,
0.10430138531493875,
0.10399838260930455,
0.10369790411498125,
0.10340000759314238,
0.10310474975114457,
0.10281218624788119,
0.10252237169953678,
0.10223535968572126,
0.1019512027559633,
0.10166995243654257,
0.10139165923764074,
0.1011163726607915,
0.1008441412066105,
0.10057501238278578,
0.10030903271231033,
0.10004624774193839,
0.09978670205084744,
0.09953043925948847,
0.09927750203860715,
0.09902793211841934,
0.09878177029792429,
0.0985390564543395,
0.0982998295526418,
0.09806412765519913,
0.09783198793147832,
0.0976034466678142]

w= np.array(w)

t = np.linspace(0,10,len(w))
# Datos del giroscopio
bias_instability_bad = 0.10 / 3600 *np.pi/180 # <0.10°/h en radianes por segundo
noise_rms_bad = 0.12*np.pi/180 # 0.12 °/s en radianes por segundo
angle_random_walk_bad = 0.006*np.pi/180 *1/60 # 0.006 °/√(h) en radianes por segundo por raíz de hora

bias_instability_med = 0.05 / 3600 * np.pi/180  # <0.06°/h en radianes por segundo
noise_rms_med = 0.12 *np.pi/180 # 0.12 °/s rms en radianes por segundo
angle_random_walk_med = 0.006 *np.pi/180 *1/60 # 0.006 °/√(h) en radianes por segundo por raíz de hora

bias_instability_good = 0.03 / 3600 *np.pi/180 # <0.06°/h en radianes por segundo
noise_rms_good= 0.050 *np.pi/180  # 0.050 °/s rms en radianes por segundo
angle_random_walk_good = 0.006 * np.pi/180 *1/60 # 0.006 °/√(h) en radianes por segundo por raíz de hora

w_real_bad = simulate_gyros_reading(w,noise_rms_bad,angle_random_walk_bad,bias_instability_bad,t)
w_real_med = simulate_gyros_reading(w,noise_rms_med,angle_random_walk_med,bias_instability_med,t)
w_real_good = simulate_gyros_reading(w,noise_rms_good,angle_random_walk_good,bias_instability_good,t)
# Visualizar los resultados
plt.figure()
plt.plot(t, w, label='Velocidad Angular (rad/s)')
plt.plot(t, w_real_bad, label='Velocidad Angular bad (rad/s)')
plt.plot(t, w_real_med, label='Velocidad Angular med (rad/s)')
plt.plot(t, w_real_good, label='Velocidad Angular good (rad/s)')
plt.xlabel('Muestras')
plt.legend()
plt.grid(True)
plt.show()

